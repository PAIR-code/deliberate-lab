rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Function: check if admin
    function isAdmin() {
      return get(/databases/$(database)/documents/allowlist/$(request.auth.token.email)).data.get("isAdmin", null) != null;
    }

    // Function: checks if experimenter
    function isExperimenter() {
      return request.auth.uid != null && exists(/databases/$(database)/documents/allowlist/$(request.auth.token.email));
    }

    // Function: checks if public
    function isPublic() {
      return resource.data.permissions.visibility == "public";
    }

    // Function: checks if creator of resource
    function isCreator() {
      return request.auth.token.email == resource.data.permissions.reader || request.auth.uid == resource.data.metadata.creator;
    }

    // Function: checks if read access (email listed in readers list)
    function isReader() {
      return request.auth.token.email in resource.data.permissions.readers;
    }

    // Function: checks if can edit experiment
    function canEditExperiment(id) {
      return isExperimenter() && (isExperimentCreator(id) || isPublicExperiment(id) || isExperimentReader(id) || isAdmin());
    }

    // Function: checks if creator of experiment
    function isExperimentCreator(experimentId) {
      return get(/databases/$(database)/documents/experiments/$(experimentId)).data.metadata.creator == request.auth.token.email || get(/databases/$(database)/documents/experiments/$(experimentId)).data.metadata.creator == request.auth.uid;
    }

    // Function: checks if experiment is public
    function isPublicExperiment(experimentId) {
      return get(/databases/$(database)/documents/experiments/$(experimentId)).data.permissions.visibility == "public";
    }

    // Function: checks if reader of experiment
    function isExperimentReader(experimentId) {
      return request.auth.token.email in get(/databases/$(database)/documents/experiments/$(experimentId)).data.permissions.readers;
    }

    // Experimenter allowlist
    match /allowlist/{experimenterId} {
      allow read: if isAdmin() || request.auth.token.email == experimenterId;
      allow update: if isAdmin();
    }

    // Experiment templates (experimenter only)
    match /experimentTemplates/{templateId} {
      allow list: if isExperimenter();
      allow get: if isExperimenter() && (isPublic() || isCreator() || isReader() || isAdmin());

      // Experiments can use `writeExperiment`, `deleteExperiment` endpoints
      allow write: if false;
    }

    // Agent templates (experimenter only)
    match /agentTemplates/{agentId} {
      allow list: if isExperimenter();
      allow get: if isExperimenter() && (isPublic() || isCreator() || isReader() || isAdmin());
      allow write: if isExperimenter() && isCreator();
    }

    // Experimenter data (experimenter with matching ID only)
    match /experimenterData/{experimenterId} {
      allow list: if false;
      allow get: if experimenterId == request.auth.token.email || experimenterId == request.auth.uid;
      allow write: if experimenterId == request.auth.token.email || experimenterId == request.auth.uid;
    }

    // Experimenter profiles (experimenter only)
    match /experimenters/{experimenterId} {
      allow read: if true;
      allow write: if experimenterId == request.auth.token.email || experimenterId == request.auth.uid;
    }

    // Experiments
    match /experiments/{experimentId} {
      allow get: if true;
      allow list: if isExperimenter();

      // Experimenters can use `writeExperiment`, `deleteExperiment` endpoints
      allow write: if false;

      match /alerts/{alertId} {
        allow read: if isExperimenter();
        allow write: if false; // Use cloud functions
      }

      match /stages/{stageId} {
        allow read: if true; // Public read
        // Experimenters can use `writeExperiment`, `deleteExperiment`
        allow write: if false;
      }

      match /roles/{roleId} {
        allow read: if true; // Public read
        allow write: if isExperimenter();
      }

      match/cohorts/{cohortId} {
        allow get: if true; // Public read
        allow list: if canEditExperiment(experimentId);

        // TODO: Experimenters can use cloud function endpoints
        allow write: if false;

        match /publicStageData/{stageId} {
          allow read: if true;

          // TODO: Triggered by cloud function triggers
          allow write: if false;

          match /chats/{chatId} {
            allow read: if true;
            allow write: if false; // Write using cloud functions
          }

          match /logs/{logId} {
            allow read: if true;
            allow write: if false; // Write using cloud functions
          }

          match /transactions/{transactionId} {
            allow read: if true;
            allow write: if false; // Write using cloud functions
          }
        }
      }

      match /participants/{participantPrivateId} {
        // TODO: Only allow experimenters to read participants and use
        // triggers to populate participantPublicData for participants
        // to read
        allow list: if true;
        allow get: if true; // Public read

        // Participants can use cloud function endpoints
        allow update: if false;

        match /stageData/{stageId} {
          allow read: if true;

          // Participants can use cloud function endpoints
          allow write: if false;
        }

        match /alerts/{alertId} {
          allow read: if true;
          allow write: if false; // Use cloud functions
        }
      }

      match /participantPublicData/{participantPublicId} {
        allow list: if true;
        allow get: if true;

        // Triggered by cloud function triggers
        allow write: if false;
      }
    }
  }
}
